{"map":"{\"version\":3,\"file\":\"neardb.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/neardb.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { uuid } from './utils';\r\nvar defaultConfig = {\r\n    storage: {}\r\n};\r\nvar NearDB = /** @class */ (function () {\r\n    /**\r\n     * Constructor to setup config, and path, and required checks.\r\n     * @param config configuration to initiatlize NearDB instance\r\n     * @param path current path of NearDB, sets to an empty array if nothing is passed\r\n     */\r\n    function NearDB(config, path) {\r\n        /** Check if config exists */\r\n        if (!config)\r\n            throw new Error('No config passed to NearDB');\r\n        /** Check if there is a storage set up */\r\n        if (!config.storage)\r\n            throw new Error('No Storage driver');\r\n        /** Overwrites config param with default configuration */\r\n        this.config = Object.assign(defaultConfig, config);\r\n        // Sets empty path type\r\n        if (!path)\r\n            path = [];\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * Static method to create a new instance of NearDB class.\r\n     * @param config configuration to initiatlize NearDB instance\r\n     * @returns an initialized instance of NearDB with the config\r\n     */\r\n    NearDB.database = function (config) {\r\n        return new NearDB(config);\r\n    };\r\n    /**\r\n     * Sets a collection within the path\r\n     * @param key expects key for collection\r\n     * @returns an instance of NearDB with the new path and existing config\r\n     */\r\n    NearDB.prototype.collection = function (key) {\r\n        // Copy value of path before passing, to avoid poluting scope\r\n        var newPath = this.path.slice();\r\n        var lastPathIndex = newPath[newPath.length - 1];\r\n        // Cannot get a sub-collection of a collection\r\n        if (lastPathIndex && lastPathIndex.type === 'collection') {\r\n            throw new Error('Only documents can have sub-collections');\r\n        }\r\n        newPath.push({\r\n            type: 'collection',\r\n            key: key\r\n        });\r\n        return new NearDB(this.config, newPath);\r\n    };\r\n    NearDB.prototype.doc = function (key) {\r\n        // Copy value of path before passing, to avoid poluting this scope\r\n        var newPath = this.path.slice();\r\n        var lastPathIndex = newPath[newPath.length - 1];\r\n        // Cannot get a sub-collection of a collection\r\n        if (lastPathIndex && lastPathIndex.type === 'doc') {\r\n            throw new Error('Cannot add documents to documents');\r\n        }\r\n        newPath.push({\r\n            type: 'doc',\r\n            key: key\r\n        });\r\n        return new NearDB(this.config, newPath);\r\n    };\r\n    NearDB.prototype.get = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var storage = _this.config.storage;\r\n            var storageRef = storage;\r\n            var lastPathIndex = _this.path[_this.path.length - 1];\r\n            // Cannot get a sub-collection of a collection\r\n            if (lastPathIndex && lastPathIndex.type === 'collection') {\r\n                throw new Error('Cannot get collections');\r\n            }\r\n            // Traverse the path to set the value\r\n            _this.path.forEach(function (item, index) {\r\n                // Check if key exists in storage, or set as an empty value\r\n                if (storageRef && storageRef[item.key]) {\r\n                    storageRef = storageRef[item.key];\r\n                }\r\n                else {\r\n                    storageRef = storageRef[item.key] = {};\r\n                }\r\n                // If its the last item on path set the value and return\r\n                if (index === _this.path.length - 1) {\r\n                    storageRef = storageRef[item.key];\r\n                    resolve(storageRef);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    NearDB.prototype.set = function (value, options) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var storage = _this.config.storage;\r\n            var storageRef = storage;\r\n            // Traverse the path to set the value\r\n            _this.path.forEach(function (item, index) {\r\n                // Check if key exists in storage, or set as an empty value\r\n                if (storageRef && storageRef[item.key]) {\r\n                    storageRef = storageRef[item.key];\r\n                }\r\n                else {\r\n                    storageRef = storageRef[item.key] = {};\r\n                }\r\n                // If its the last item on path set the value and return\r\n                if (index === _this.path.length - 1) {\r\n                    if (options && options.merge) {\r\n                        storageRef = Object.assign(storageRef[item.key], value);\r\n                    }\r\n                    else {\r\n                        storageRef = storageRef[item.key] = value;\r\n                    }\r\n                    resolve(storageRef);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    NearDB.prototype.add = function (value) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var storage = _this.config.storage;\r\n            var storageRef = storage;\r\n            var lastPathIndex = _this.path[_this.path.length - 1];\r\n            if (lastPathIndex && lastPathIndex.type !== 'collection') {\r\n                reject(new Error('Can only add document to collections'));\r\n            }\r\n            // Traverse the path to set the value\r\n            _this.path.forEach(function (item, index) {\r\n                // Check if key exists in storage, or set as an empty value\r\n                if (storageRef && storageRef[item.key]) {\r\n                    storageRef = storageRef[item.key];\r\n                }\r\n                else {\r\n                    // If key is in path, but doesnt exist create it\r\n                    storageRef = storageRef[item.key] = {};\r\n                }\r\n                // If its the last item on path set the value and return\r\n                if (index === _this.path.length - 1) {\r\n                    storageRef = storageRef[item.key][uuid()] = value;\r\n                    resolve(storageRef);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return NearDB;\r\n}());\r\nexport default NearDB;\r\n//# sourceMappingURL=neardb.js.map","dts":{"name":"/Users/leofarias/Documents/Projects/neardb/dist/types/neardb.d.ts","writeByteOrderMark":false,"text":"import { IConfig, PathList, ISetOptions } from './types';\r\nexport default class NearDB {\r\n    /** Config that is used to init NearDB */\r\n    config: IConfig;\r\n    /** Data path that is used to interact with storage */\r\n    path: PathList;\r\n    /**\r\n     * Constructor to setup config, and path, and required checks.\r\n     * @param config configuration to initiatlize NearDB instance\r\n     * @param path current path of NearDB, sets to an empty array if nothing is passed\r\n     */\r\n    constructor(config: IConfig, path?: PathList);\r\n    /**\r\n     * Static method to create a new instance of NearDB class.\r\n     * @param config configuration to initiatlize NearDB instance\r\n     * @returns an initialized instance of NearDB with the config\r\n     */\r\n    static database(config: IConfig): NearDB;\r\n    /**\r\n     * Sets a collection within the path\r\n     * @param key expects key for collection\r\n     * @returns an instance of NearDB with the new path and existing config\r\n     */\r\n    collection(key: string): NearDB;\r\n    doc(key: string): NearDB;\r\n    get(): Promise<{}>;\r\n    set(value: object, options?: ISetOptions): Promise<{}>;\r\n    add(value: object): Promise<{}>;\r\n}\r\n"}}
